<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.aixuxi.ledger.mapper.LedgerRecordMapper">

    <insert id="saveOrUpdateRecordList">
        INSERT INTO ledger_record
        (
        user_id,
        transaction_time,
        transaction_category,
        counterparty_name,
        product_name,
        transaction_type,
        payment_method,
        amount,
        current_status,
        remark,
        transaction_sn,
        merchant_order_sn,
        counterparty_account,
        create_time,
        create_user,
        update_user,
        update_time
        )VALUES
        <foreach collection="list" item="item" separator="," index="index">
            (
            #{item.userId},
            #{item.transactionTime},
            #{item.transactionCategory},
            #{item.counterpartyName},
            #{item.productName},
            #{item.transactionType},
            #{item.paymentMethod},
            #{item.amount},
            #{item.currentStatus},
            #{item.remark},
            #{item.transactionSn},
            #{item.merchantOrderSn},
            #{item.counterpartyAccount},
            #{item.createTime},
            #{item.createUser},
            #{item.updateUser},
            #{item.updateTime}
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
        update_time = values(update_time),
        update_user = values(update_user)
    </insert>
    <select id="queryIncomeRatioReport" resultType="cn.aixuxi.ledger.dto.LedgerReportDTO">
        SELECT transaction_category as "name",
               SUM(amount)          as "value"
        FROM ledger_record
        WHERE user_id = #{userId}
          AND transaction_type = 0
        GROUP BY transaction_category
    </select>
    <select id="queryExpenseRatioReport" resultType="cn.aixuxi.ledger.dto.LedgerReportDTO">
        SELECT transaction_category as "name",
               SUM(amount)          as "value"
        FROM ledger_record
        WHERE user_id = #{userId}
          AND transaction_type = 1
        GROUP BY transaction_category
    </select>
    <select id="queryOtherRatioReport" resultType="cn.aixuxi.ledger.dto.LedgerReportDTO">
        SELECT transaction_category as "name",
               SUM(amount)          as "value"
        FROM ledger_record
        WHERE user_id = #{userId}
          AND transaction_type = 2
        GROUP BY transaction_category
    </select>
    <select id="queryRecentIncomeReport" resultType="cn.aixuxi.ledger.dto.LedgerReportDTO">
        SELECT case
                   when product_name = null or product_name = '/' then transaction_category
                   else product_name end "name",
               amount as                 "value"
        FROM ledger_record
        WHERE user_id = #{userId}
          AND transaction_type = 0
        ORDER BY transaction_time DESC LIMIT 10
    </select>
    <select id="queryRecentExpenseReport" resultType="cn.aixuxi.ledger.dto.LedgerReportDTO">
        SELECT case
                   when product_name = null or product_name = '/' then transaction_category
                   else product_name end "name",
               amount as                 "value"
        FROM ledger_record
        WHERE user_id = #{userId}
          AND transaction_type = 1
        ORDER BY transaction_time DESC LIMIT 10
    </select>
    <select id="queryRecentOtherReport" resultType="cn.aixuxi.ledger.dto.LedgerReportDTO">
        SELECT case
                   when product_name = null or product_name = '/' then transaction_category
                   else product_name end "name",
               amount as                 "value"
        FROM ledger_record
        WHERE user_id = #{userId}
          AND transaction_type = 2
        ORDER BY transaction_time DESC LIMIT 10
    </select>
    <select id="queryRecordListByTissue" resultType="cn.aixuxi.ledger.entity.LedgerRecord">
        select t1.user_id as "userId",
        t2.real_name as "userName",
        t1.transaction_time as "transactionTime",
        t1.transaction_category as "transactionCategory",
        t1.product_name as "productName",
        t1.transaction_type as "transactionType",
        t1.payment_method as "paymentMethod",
        t1.amount,
        t1.remark
        from ledger_record t1
        left join ledger_user t2 on t1.user_id = t2.id
        left join ledger_tissue_user t3 on t3.user_id = t2.id
        where t3.tissue_id = #{query.tissueId}
        and t1.transaction_time > t3.join_time
        <if test="query.transactionType != null">
            and t1.transaction_type = #{query.transactionType}
        </if>
        <if test="query.transactionCategoryList != null and query.transactionCategoryList.size>0">
            and t1.transaction_category in (
            <foreach collection="query.transactionCategoryList" item="it" separator=",">
                '${it}'
            </foreach>
            )
        </if>
        <if test="query.transactionStartTime != null and query.transactionEndTime != null">
            and t1.transaction_time between #{query.transactionStartTime} and #{query.transactionEndTime}
        </if>
    </select>
    <select id="queryUserTotal" resultType="cn.aixuxi.ledger.vo.LedgerTotalVO">
        select t1.initial_amount                                          as "initialAmount",
               t2.totalIncomePrice,
               t3.totalExpendPrice,
               t1.initial_amount + t2.totalIncomePrice - totalExpendPrice as "totalPrice"
        from ledger_user t1
                 left join (select t1.user_id                  as "userId",
                                   SUM(COALESCE(t1.amount, 0)) as "totalIncomePrice"
                            from ledger_record t1
                            where t1.user_id = #{userId}
                              and t1.transaction_type = 0
                            group by t1.user_id) t2 on t1.id = t2.userId
                 left join (select t1.user_id                  as "userId",
                                   SUM(COALESCE(t1.amount, 0)) as "totalExpendPrice"
                            from ledger_record t1
                            where t1.user_id = #{userId}
                              and t1.transaction_type = 1
                            group by t1.user_id) t3 on t1.id = t3.userId
        where t1.id = #{userId}
    </select>
    <select id="queryRecentTradeReport" resultType="cn.aixuxi.ledger.dto.LedgerReportDTO">
        SELECT case
                   when product_name = null or product_name = '/' then transaction_category
                   else product_name end "name",
               amount as                 "value"
        FROM ledger_record
        WHERE user_id = #{userId}
        ORDER BY transaction_time DESC LIMIT 50
    </select>
    <select id="queryTradeReport" resultType="cn.aixuxi.ledger.dto.LedgerReportDTO">
        SELECT t2.transactionTime                                                                            as "name",
               sum(t1.initial_amount + COALESCE(t2.totalIncomePrice, 0) - COALESCE(t3.totalExpensePrice, 0)) as "value"
        FROM ledger_user t1
                 LEFT JOIN (SELECT t1.user_id                             AS "userId",
                                   DATE_FORMAT(transaction_time, '%Y-%m') AS "transactionTime",
                                   SUM(COALESCE(t1.amount, 0))            AS "totalIncomePrice"
                            FROM ledger_record t1
                            WHERE t1.user_id = #{userId}
                              AND t1.transaction_type = 0
                            GROUP BY t1.user_id,
                                     DATE_FORMAT(transaction_time, '%Y-%m')) t2 ON t1.id = t2.userId
                 LEFT JOIN (SELECT t1.user_id                             AS "userId",
                                   DATE_FORMAT(transaction_time, '%Y-%m') AS "transactionTime",
                                   SUM(COALESCE(t1.amount, 0))            AS "totalExpensePrice"
                            FROM ledger_record t1
                            WHERE t1.user_id = #{userId}
                              AND t1.transaction_type = 1
                            GROUP BY t1.user_id,
                                     DATE_FORMAT(transaction_time, '%Y-%m')) t3
                           ON t1.id = t3.userId and t2.transactionTime = t3.transactionTime
        where t1.id = #{userId}
        group by t2.transactionTime
        order by t2.transactionTime asc limit 12
    </select>
</mapper>
